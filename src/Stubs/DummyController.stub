<?php

namespace {{DummyControllerNameSpace}};

use App\Http\Controllers\Controller;
@if('request')
use {{DummyUpdateRequestWithNameSpace}};
use {{DummyCreateRequestWithNameSpace}};
@else
use Illuminate\Http\Request;
@endif('request')
@if('resource')use {{DummyResourceWithNameSpace}};@endif('resource')
use {{DummyModelWithNameSpace}};
use Illuminate\Http\JsonResponse;
use Medianet\APIToolKit\Api\ApiResponse;

class {{DummyController}} extends Controller
{
    use ApiResponse;

    public function __construct()
    {
        $this->authorizeResource({{DummyModel}}::class, '{{dummy}}');
    }
    
    public function index(): JsonResponse
    {
        ${{dummies}} = {{DummyModel}}::@if('filter')useFilters()->@endif('filter')dynamicPaginate();

        return $this->responseApiKit(200, ['{{dummies}}' => @if('resource')$this->getResourceData(${{dummies}}, {{DummyResource}}::class)@endif('resource')]);
    }

    public function store(@if('request'){{DummyCreateRequest}} @else Request @endif('request') $request): JsonResponse
    {
        ${{dummy}} = {{DummyModel}}::create($request->validated());

        return $this->responseApiKit(201, ['{{dummy}}' => @if('resource')new {{DummyResource}}(@endif('resource')${{dummy}}@if('resource'))@endif('resource')], '{{Dummy}} created successfully');
    }

    public function show({{DummyModel}} ${{dummy}}): JsonResponse
    {
        return $this->responseApiKit(200, ['{{dummy}}' => @if('resource')new {{DummyResource}}(@endif('resource')${{dummy}}@if('resource'))@endif('resource')]);
    }

    public function update(@if('request'){{DummyUpdateRequest}} @else Request @endif('request') $request, {{DummyModel}} ${{dummy}}): JsonResponse
    {
        ${{dummy}}->update($request->validated());

        return $this->responseApiKit(200, ['{{dummy}}' => @if('resource')new {{DummyResource}}(@endif('resource')${{dummy}}@if('resource'))@endif('resource')],'{{Dummy}} updated Successfully');
    }

    public function destroy({{DummyModel}} ${{dummy}}): JsonResponse
    {
        ${{dummy}}->delete();

        return $this->responseApiKit(200, [],'{{Dummy}} deleted Successfully');
    }

   @if('soft-delete') public function restore($id): JsonResponse
    {
        ${{dummy}} = {{DummyModel}}::onlyTrashed()->findOrFail($id);

        ${{dummy}}->restore();

        return $this->responseApiKit(200, [],'{{Dummy}} restored Successfully.');
    }

    public function permanentDelete($id): JsonResponse
    {
        ${{dummy}} = {{DummyModel}}::withTrashed()->findOrFail($id);

        ${{dummy}}->forceDelete();

        return $this->responseApiKit(200, [],'{{Dummy}} deleted Successfully.');
    }
@endif('soft-delete')
}
